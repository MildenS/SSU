/*
for_each никак не использует возвращаемое значение, т.е. не способен изменить контейнер, по которому он "пробегает"
(Относится к неизменяемый stl функциям),но, если передавать в предикат переменные по ссылке, то изменить можно (не баг, а фича). 
По этой причине for_each идеально подсходит для вывода содержимого контейнера на кэран и подобных задач не требующих изменения 
содержимого передаваемого контейнера.
Пример: for_each(container_name.begin(), container_name.end(), [](container_element a){cout<<a;}); - вывод элементов контейнера на экран.
Также отмечу, что for_each имеет только унарную версию, т.е. может работать только с одним контйнером.

transform же наоборот использует возвращаемое значение, которое он присваивает разыменованному итератору (он относится к изменяющим значение stl функциям).
Примером использвания transform может послужить смена знака всех элементов целочисленного контейнера:
transform(container_name.begin(), container_name.end(), conteiner_name.begin(), [](int a) {return -a;});
Также transform имеет бинарную версию, то есть может работать сразу с двумя контейнерами. Пример:
std::transform(firstContainer.cbegin(), FirstConteiner.cend(), secondConteiner.cbegin(), second.begin(), std::plus<>{}); - суммирование значений двух контейнеров.

*/
